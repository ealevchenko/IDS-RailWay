using EFIDS.Concrete;
using EFIDS.Entities;
using IDS;
using IDSLogs.Enum;
using IDS.Helper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Test.TestModule
{
    public class Test_IDS
    {
        public Test_IDS()
        {

        }

        #region IDSTransfer
        public void IDSTransfer_AddArrival()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            long res = ids.InsertArrivalSostav(1608, 5620, 3609, "4577-038-4670", new DateTime(2020, 3, 5, 10, 40, 0), null);
            long res1 = ids.InsertArrivalSostav(1608, 5621, 3609, "4577-038-4670", new DateTime(2020, 3, 5, 10, 45, 0), null);
            Console.WriteLine("ID = {0}", res);
        }

        public void IDSTransfer_GetNumDoc()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            string res = ids.AddUpdateUZ_DOC_To_DB_IDS(64566136, null);
            Console.WriteLine("num_doc = {0}", res);
        }
        /// <summary>
        /// Тест переноса составов на отправление на УЗ по данным КИС
        /// </summary>
        public void IDSTransfer_InsertOutgoingSostavOfKis()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            ids.InsertOutgoingSostavOfKis();
        }

        public void IDSTransfer_IncomingArrivalSostav()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            int res = ids.IncomingArrivalSostav(42407, new List<int> { 63664767 }, @"EUROPE\ealevchenko");
        }

        public void IDSTransfer_IncomingArrivalSostav_All()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            int res = ids.IncomingArrivalSostav();
        }
        public void IDSTransfer_SetStationOutgoingWagonsOfKIS()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            int res = ids.SetStationOutgoingWagonsOfKIS(513, @"EUROPE\test");
        }

        /// <summary>
        /// Перенос состава на УЗ и закрытие WIR
        /// </summary>
        public void IDSTransfer_SendingOutgoingSostav()
        {

            IDSTransfer ids = new IDSTransfer(service.Test);
            int res = ids.SendingOutgoingSostav(499, @"EUROPE\test");
        }
        /// <summary>
        /// Тест административной функции закрыть внутренее перемещение
        /// </summary>
        /// <returns></returns>
        public void IDSTransfer_CloseWir() {
            IDSTransfer ids = new IDSTransfer(service.Test);
            List<int> list = new List<int>() { 131984, 132343, 132557, 133091, 133093, 133094, 133109, 133135, 133137, 133138, 133739, 134502, 134503, 135493, 135494, 135498, 135533, 135534, 134931, 134932, 134933, 134934, 136091, 150032, 157130, 128173, 131765, 131767, 128845, 129018, 45860, 45861, 45862, 45877, 44481, 44482, 43698, 43699, 43700, 43701, 43704, 43707, 43708, 43709, 43722, 43724, 43733, 42379, 42028, 42029, 42019, 42020, 42022, 42024, 41244, 41245, 41246, 41247, 41248, 41250, 41251, 41252, 41253, 41254, 41258, 41265, 40681, 40692, 40699, 40705, 40720, 40724, 40727, 40794, 176395, 176404, 176417, 156333, 181975, 156300, 156297, 156289, 156290, 156279, 164105, 157269, 157271, 157258, 157261, 157263, 157140, 157142, 157148, 157120, 157111, 176386, 176388, 176390, 176407, 176409, 176418, 176419, 176420, 40058, 40059, 40172, 40173, 40175, 40177, 40181, 40183, 40184, 40190, 40191, 40193, 40195, 40197, 40201, 40202, 40204, 40205, 40208, 40209, 40213, 40682, 40687, 40689, 40693, 40695, 40696, 40697, 40698, 40700, 40701, 40711, 40712, 40714, 40721, 40723, 40726, 40729, 40730, 40674, 40678, 40790, 40793, 40795, 40798, 40800, 40806, 40807, 40808, 40809, 40815, 40821, 40822, 40823, 40824, 40826, 40829, 40837, 40838, 40840, 40841, 40846, 41134, 41136, 41138, 41139, 41255, 41263, 41264, 41266, 41267, 41268, 41269, 41271, 41272, 41274, 41275, 41485, 41487, 41501, 41503, 41505, 41507, 41508, 41509, 41510, 41512, 41513, 41515, 41516, 41517, 41521, 41522, 41523, 41525, 41526, 42023, 42040, 42041, 42347, 42348, 42350, 42360, 42363, 42365, 42369, 42373, 42375, 42378, 42381, 42387, 42390, 42391, 42393, 42394, 42562, 42615, 43415, 43416, 43419, 43420, 43422, 43423, 43425, 43426, 43427, 43428, 43436, 43437, 43450, 43451, 43452, 43453, 43454, 43455, 43459, 43460, 43463, 43464, 43465, 43466, 44138, 44141, 44144, 44146, 44492, 44493, 44494, 44495, 44496, 44498, 44499, 44501, 44502, 44503, 44506, 44509, 44511, 44519, 44521, 44536, 44538, 44539, 45318, 45857, 45859, 45867, 45874, 45876, 45878, 45879, 46608, 128666, 64486, 64489, 64490, 64491, 64492, 64495, 64496, 64497, 128817, 128836, 128858, 64824, 65722, 65724, 65725, 65726, 65728, 65729, 65730, 65732, 65733, 128366, 128394, 175402, 175403, 128051, 128067, 175415, 175416, 175417, 175418, 175419, 175420, 128342, 128347, 128348, 128354, 128188, 128218, 128226, 128227, 128228, 128233, 111198, 111186, 111189, 127340, 127341, 127348, 127353, 127359, 124074, 124081, 124082, 127298, 128577, 128578, 128581, 128582, 128584, 128585, 128586, 128587, 128588, 128589, 128590, 128591, 128592, 128593, 128594, 128595, 128597, 125809, 125817, 150018, 150028, 150040, 150042, 150043, 150046, 150047, 150050, 150051, 153009, 153010, 153011, 153012, 153013, 153024, 153025, 153026, 153036, 153038, 153039, 153040, 153042, 153044, 153045, 153046, 153048, 153051, 153053, 153054, 153057, 153058, 153061, 155356, 155361, 155376, 155380, 154290, 154294, 157099, 157102, 176385, 176387, 176405, 176406, 176408, 40176, 40180, 40683, 40685, 40707, 40718, 40719, 40725, 40728, 40676, 40789, 40797, 40799, 40805, 40810, 40811, 40813, 40833, 40834, 40835, 40843, 41133, 41135, 41137, 41474, 41488, 41492, 41511, 41524, 42345, 42351, 42367, 42370, 42372, 42376, 42380, 42386, 42392, 42587, 42589, 42591, 42592, 42593, 42594, 42595, 42597, 42599, 42600, 42601, 42603, 42604, 42605, 42606, 42607, 42608, 42609, 43413, 43430, 43431, 43448, 43449, 43456, 43461, 43696, 44139, 44140, 44142, 44143, 44148, 44149, 44484, 44504, 44513, 44517, 44527, 44528, 44531, 44534, 44535, 45319, 45332, 45333, 46581, 128665, 128669, 128675, 128682, 128685, 128686, 128689, 128698, 128699, 128855, 128859, 128867, 128369, 128382, 128391, 128392, 128396, 128048, 128052, 128056, 128060, 128066, 128069, 128074, 128075, 128078, 128944, 128947, 128955, 128957, 128960, 128965, 128969, 128972, 128974, 128977, 128978, 128987, 175423, 128331, 128335, 128340, 128346, 128353, 128363, 128189, 128196, 128210, 128213, 128216, 128222, 111197, 111185, 111195, 127342, 127346, 127347, 127354, 127355, 127373, 124032, 124041, 124048, 124050, 124052, 124061, 124063, 124075, 124076, 124078, 127273, 126777, 126778, 126779, 126782, 126821, 125808, 131764, 149999, 150001, 150002, 150003, 150007, 150008, 150009, 150011, 150017, 150020, 150024, 150035, 150039, 150045, 149693, 149698, 149710, 149711, 149736, 149739, 153014, 153015, 153037, 153047, 153049, 153055, 155353, 155355, 155360, 155368, 155379, 155381, 155384, 155388, 155393, 155394, 155399, 155401, 155402, 155407, 154297, 154343, 157101, 157113, 157115, 157117, 157125, 157128, 157129, 157133, 157135, 157141, 157145, 157146, 157155, 157158, 157221, 157225, 157226, 157237, 157243, 157244, 157254, 157255, 157259, 157268, 165643, 156296, 156304, 156305, 156306, 156308, 156310, 156313, 156322, 180886, 176389, 176402, 40688, 40716, 40722, 43720, 43723, 43734, 131773, 131808, 40170, 40286, 40287, 40288, 40289, 40290, 40291, 40292, 40293, 40294, 40295, 40296, 40297, 40298, 40299, 40300, 40301, 40302, 40303, 40304, 40305, 40306, 40307, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 40316, 40317, 40318, 40319, 40321, 40322, 40323, 40324, 40325, 40326, 40327, 40328, 40329, 40330, 40332, 40333, 40334, 40335, 40336, 40337, 40338, 41704, 41705, 41707, 41708, 41695, 41696, 41697, 41698, 41699, 42043, 42044, 42045, 42048, 42052, 42789, 42790, 42801, 42802, 42803, 42806, 42807, 42808, 42817, 42818, 42819, 42824, 42827, 42828, 42829, 42830, 42831, 42832, 42833, 42834, 42835, 42837, 42838, 42839, 42840, 42841, 42842, 42843, 42844, 42845, 42846, 42847, 42848, 42849, 42850, 42851, 42852, 42853, 42854, 42855, 42856, 42857, 42858, 42859, 42860, 42861, 42862, 42863, 42864, 42865, 42866, 42867, 42868, 42869, 42870, 42871, 42873, 42874, 42875, 42876, 42877, 42878, 42879, 43392, 43393, 43395, 43396, 43397, 43398, 43399, 43400, 43401, 43402, 43403, 43404, 43405, 43406, 43407, 43408, 44002, 44003, 44012, 44013, 44014, 44015, 44280, 44281, 44282, 44283, 44284, 44285, 44286, 44287, 44293, 44294, 44303, 44304, 44305, 44309, 44310, 44311, 44313, 44314, 44315, 45156, 45153, 45152, 45151, 45150, 45167, 45173, 45147, 45155, 45169, 45168, 45170, 45172, 45372, 45384, 45388, 45390, 45409, 45410, 45411, 45373, 45385, 45387, 45406, 45381, 45386, 58075, 58076, 58077, 58079, 67469, 167472, 40339, 42046, 42047, 42049, 42050, 42051, 42053, 42054, 42055, 42056, 42057, 42058, 42059, 42060, 42061, 42066, 42067, 42068, 42069, 42596, 42809, 42815, 42816, 42821, 42822, 42823, 42825, 42826, 43394, 45154, 45183, 45389, 45371, 45407, 188619, 188621, 188620, 40096, 40093, 40094, 40097, 40147, 40149, 40165, 40166, 40482, 40484, 40485, 40486, 40487, 40488, 40494, 40501, 40521, 40522, 40524, 40530, 40534, 40535, 40537, 40538, 40548, 40552, 40624, 40627, 40630, 40631, 40731, 40745, 40750, 40771, 40772, 40773, 40857, 40859, 40864, 40865, 40866, 40867, 40868, 40965, 40979, 40986, 40991, 40997, 41007, 41015, 41016, 129027, 129028, 129029, 41022, 41023, 41031, 41032, 41033, 41036, 41037, 41039, 41057, 41059, 41060, 41145, 41150, 41154, 41158, 41164, 41171, 41172, 41173, 41174, 41194, 41197, 41199, 41201, 41202, 41204, 41206, 41210, 41221, 41222, 41225, 41226, 41227, 41228, 41233, 41234, 41235, 41238, 41414, 41419, 41422, 41424, 41425, 41430, 41440, 41441, 41447, 41452, 41457, 41458, 41459, 41463, 41464, 41465, 41469, 41471, 41472, 41556, 41561, 41562, 41569, 41570, 41574, 41577, 41578, 41719, 41720, 41723, 41726, 41727, 42262, 42656, 42684, 42691, 42694, 42696, 42776, 42780, 42782, 42792, 42798, 42799, 42800, 43149, 43150, 43514, 43518, 43575, 44101, 44102, 44104, 44105, 44108, 44164, 44165, 44270, 44271, 44272, 44288, 44298, 44317, 44447, 44448, 44449, 44452, 44761, 44763, 44775, 44834, 44837, 44929, 44943, 44986, 44993, 45273, 45278, 45279, 45280, 45622, 45624, 45630, 45641, 45644, 45646, 45647, 46109, 46110, 46112, 58072, 58073, 58074, 175383, 175384, 175385, 175386, 175387, 175388, 175389, 175390, 175391, 175392, 175393, 175394, 175395, 175422, 175430, 175431, 175432, 175433, 175434, 175435, 175436, 175437, 175440, 175446, 57654, 57765, 57769, 57770, 133142, 133152, 133153, 133154, 133161, 133162, 133164, 133166, 133167, 133169, 133170, 133173, 133174, 133175, 133176, 133177, 133179, 133182, 133233, 133237, 130150, 171858, 185335, 40099, 40098, 40100, 40529, 40625, 40751, 41175, 41190, 41193, 41239, 41240, 41242, 42775, 43752, 43753, 43754, 43761, 43769, 43775, 43776, 43794, 43795, 43798, 43799, 43800, 43976, 43986, 43988, 44434, 44445, 44453, 44459, 44460, 44461, 44462, 40084, 40609, 42039, 42881, 44219, 44700, 44922, 129020, 59606, 126153, 175427, 175459, 175460, 175463, 175469, 127324, 40608, 43991, 128644, 176412, 176413, 175539, 40069, 40065, 40066, 40083, 40067, 40120, 40122, 40123, 40124, 40125, 40126, 40127, 40128, 40129, 40130, 40131, 40132, 40134, 40135, 40138, 40070, 40071, 40110, 40087, 40088, 40091, 40139, 40140, 40185, 40237, 40238, 40269, 40270, 40271, 40272, 40273, 40275, 40276, 40282, 40283, 40255, 40254, 40260, 40251, 40253, 40267, 40258, 40252, 40259, 40239, 40268, 40240, 40257, 40256, 40244, 40243, 40242, 40261, 40265, 40246, 40245, 40372, 40344, 40373, 40346, 40374, 40375, 40345, 40376, 40347, 40380, 40358, 40381, 40357, 40356, 40382, 40383, 40354, 40384, 40353, 40352, 40351, 40350, 40387, 40349, 40388, 40361, 40389, 40360, 40390, 40391, 40359, 40392, 40371, 40370, 40369, 40368, 40367, 40366, 40365, 40364, 40363, 40362, 40439, 40440, 40464, 40468, 40470, 40471, 40472, 40473, 40474, 40475, 40495, 40497, 40467, 40466, 40461, 40459, 40458, 40455, 40454, 40452, 40449, 40443, 40445, 40507, 40587, 40591, 40592, 40594, 40615, 40616, 40663, 40679, 40753, 40757, 40761, 40764, 40778, 40819, 40845, 40848, 40906, 40908, 40909, 40910, 40911, 40912, 40914, 40924, 40925, 40928, 40929, 40930, 40931, 40932, 40933, 40934, 40935, 40936, 40937, 40938, 40939, 40940, 40941, 40944, 40945, 40951, 40954, 40956, 40957, 40959, 41049, 41077, 41078, 41081, 41082, 41083, 41084, 41085, 41092, 41093, 41095, 41096, 41097, 41098, 41099, 41107, 41109, 41110, 41111, 41112, 41113, 41114, 41116, 41118, 41121, 41122, 41124, 41125, 41126, 41128, 41129, 41131, 41142, 41161, 41162, 41168, 41177, 41178, 41188, 41230, 41260, 41262, 41277, 41287, 41288, 41289, 41293, 41294, 41295, 41296, 41297, 41298, 41299, 41320, 41348, 41369, 41370, 41371, 41372, 41373, 41380, 41388, 41396, 41531, 41538, 41552, 41553, 41606, 41625, 41592, 41593, 41595, 41638, 41641, 41642, 41646, 41647, 41648, 41649, 41650, 41651, 41653, 41654, 41655, 41656, 41658, 41659, 41661, 41662, 41665, 41669, 41670, 41671, 41673, 41674, 41676, 41677, 41678, 41680, 41682, 41683, 41684, 41685, 41690, 41691, 41692, 41712, 41789, 41809, 41795, 41802, 41842, 41812, 41799, 41804, 41806, 41807, 41813, 41815, 41832, 41796, 41808, 41816, 41810, 41833, 41817, 41800, 41837, 41811, 41818, 41814, 41820, 41819, 41821, 41822, 41823, 41826, 41827, 41831, 41834, 41835, 41838, 41840, 41843, 41805, 41836, 41839, 41801, 41803, 41969, 41972, 41974, 41971, 41985, 42033, 42034, 42035, 42036, 42037, 42192, 42193, 42195, 42196, 42197, 42200, 42201, 42202, 42203, 42204, 42205, 42206, 42211, 42212, 42213, 42214, 42215, 42216, 42217, 42218, 42219, 42220, 42221, 42222, 42223, 42226, 42228, 42233, 42311, 42327, 42328, 42330, 42331, 42332, 42333, 42334, 42336, 42341, 42457, 42458, 42459, 42460, 42461, 42462, 42463, 42465, 42466, 42467, 42468, 42469, 42470, 42471, 42472, 42473, 42474, 42475, 42476, 42477, 42489, 42490, 42492, 42493, 42495, 42496, 42497, 42498, 42499, 42500, 42501, 42502, 42503, 42504, 42505, 42506, 42507, 42508, 42509, 42511, 42512, 42528, 42529, 42531, 42537, 42564, 42566, 42572, 42573, 42576, 42585, 42611, 42681, 42733, 42737, 42738, 42739, 42740, 42741, 42745, 42746, 42748, 42749, 42752, 42753, 42754, 42756, 42759, 42761, 42762, 42763, 42764, 42765, 42774, 42783, 42784, 42785, 42786, 42787, 42788, 42918, 42920, 42957, 42968, 43040, 43045, 43047, 43048, 43051, 43052, 43053, 43054, 43055, 43056, 43057, 43058, 43059, 43062, 43063, 43064, 43065, 43067, 43068, 43069, 43070, 43071, 43072, 43074, 43075, 43077, 43081, 43082, 43084, 43086, 43087, 43088, 43089, 43090, 43091, 43092, 43180, 43254, 43255, 43256, 43263, 43265, 43266, 43267, 43268, 43270, 43271, 43272, 43273, 43274, 43275, 43278, 43280, 43281, 43282, 43283, 43284, 43291, 43294, 43298, 43299, 43300, 43301, 43303, 43304, 43305, 43306, 43307, 43308, 43309, 43310, 43311, 43312, 43313, 43315, 43316, 43317, 43318, 43319, 43320, 43321, 43323, 43324, 43325, 43326, 43327, 43328, 43330, 43331, 43336, 43339, 43340, 43342, 43343, 43344, 43346, 43347, 43348, 43349, 43350, 43351, 43352, 43353, 43355, 43357, 43358, 43359, 43360, 43363, 43364, 43365, 43366, 43367, 43368, 43372, 43379, 43386, 43411, 43524, 43993, 43995, 44020, 44021, 44022, 44023, 44024, 44025, 44026, 44027, 44028, 44029, 44031, 44032, 44033, 44034, 44035, 44036, 44037, 44038, 44039, 44040, 44041, 44042, 44043, 44046, 44047, 44048, 44049, 44050, 44051, 44054, 44055, 44056, 44057, 44060, 44062, 44063, 44064, 44065, 44066, 44067, 44068, 44069, 44070, 44071, 44072, 44074, 44076, 44077, 44078, 44079, 44191, 44274, 44290, 44292, 44295, 44296, 44297, 44307, 44308, 44319, 44320, 44321, 44322, 44323, 44324, 44326, 44327, 44328, 44329, 44330, 44331, 44332, 44333, 44334, 44335, 44336, 44337, 44339, 44340, 44341, 44343, 44344, 44345, 44347, 44348, 44349, 44350, 44352, 44353, 44354, 44355, 44356, 44357, 44358, 44359, 44360, 44361, 44362, 44363, 44364, 44365, 44366, 44367, 44368, 44370, 44382, 44383, 44384, 44387, 44413, 44500, 44505, 44518, 44525, 44537, 44540, 44541, 44542, 44543, 44548, 44552, 44553, 44554, 44555, 44556, 44559, 44566, 44567, 44568, 44569, 44572, 44573, 44574, 44575, 44576, 44577, 44578, 44579, 44580, 44581, 44582, 44585, 44586, 44587, 44589, 44590, 44591, 44592, 44593, 44638, 44785, 44789, 44811, 44849, 44852, 44997, 45030, 45037, 45044, 45045, 45046, 45048, 45049, 45050, 45051, 45052, 45054, 45056, 45057, 45058, 45059, 45062, 45064, 45068, 45070, 45075, 45076, 45078, 45079, 45083, 45039, 45029, 45031, 45098, 45100, 45101, 45187, 45174, 45175, 45176, 45178, 45166, 45165, 45179, 45171, 45181, 45317, 45420, 45436, 45437, 45438, 45439, 45440, 45441, 45442, 45443, 45444, 45445, 45446, 45447, 45448, 45462, 45464, 45475, 45484, 45492, 45494, 45495, 45496, 45497, 45502, 45503, 45504, 45505, 45511, 45512, 45524, 45526, 45527, 45528, 45529, 45530, 45531, 45532, 45533, 45534, 45536, 45537, 45538, 45539, 45628, 45758, 45759, 45760, 45761, 45764, 45785, 45786, 45788, 45789, 45868, 45957, 45960, 45961, 45962, 45963, 45964, 45965, 45966, 45971, 45972, 45973, 45974, 45975, 45976, 45978, 45980, 45982, 45983, 45984, 45985, 45988, 45989, 45990, 45992, 45994, 45995, 45996, 45998, 45999, 46000, 46001, 46004, 46005, 46006, 46007, 46008, 46009, 46013, 46018, 46019, 46021, 46022, 46023, 46028, 46029, 46030, 46036, 46037, 46038, 46039, 46041, 46042, 46044, 46045, 46046, 46048, 46049, 46052, 46054, 46055, 46056, 46057, 46058, 46060, 46177, 46178, 46179, 46181, 46182, 46183, 46184, 46185, 46186, 46187, 46191, 46192, 46193, 46194, 46196, 46198, 46199, 46201, 46203, 46206, 46207, 46210, 46211, 46212, 46213, 46214, 46226, 46228, 46230, 46231, 46300, 46302, 46304, 46305, 46310, 46311, 46312, 46313, 46314, 46315, 46316, 46317, 46318, 46320, 46323, 46325, 46326, 46327, 46328, 46329, 46330, 46332, 46333, 46334, 46335, 46337, 46338, 57977, 57978, 57979, 57984, 57995, 57999, 58000, 58001, 58002, 58003, 58004, 58005, 58006, 58007, 58008, 58009, 58010, 58011, 58012, 58013, 58014, 58015, 58016, 58017, 58018, 57491, 57823, 57850, 58904, 58926, 58927, 59059, 59410, 59411, 60964, 60965, 60966, 60967, 60968, 60969, 60970, 60971, 60972, 60973, 60974, 60976, 60978, 126135, 126139, 126141, 126145, 126081, 63163, 63170, 63173, 63174, 63175, 126168, 126169, 63286, 63287, 63288, 63289, 63290, 63291, 63292, 63299, 63300, 63310, 128647, 128648, 128656, 128657, 128658, 128664, 128667, 128668, 128670, 128671, 128672, 128676, 128677, 128679, 128680, 128681, 128687, 128688, 128690, 128691, 128692, 128693, 128695, 128697, 128700, 128701, 128702, 128703, 128819, 128820, 128857, 128863, 128864, 128866, 65793, 65794, 65795, 65797, 65798, 65799, 65800, 65801, 65802, 65803, 65804, 65805, 65806, 65807, 65808, 65809, 65810, 65811, 65812, 65217, 65219, 65220, 65244, 65370, 65371, 65374, 65375, 65376, 65576, 65578, 65579, 65586, 65587, 128365, 128367, 128368, 128371, 128372, 128373, 128380, 128381, 128383, 128384, 128386, 128387, 128388, 128390, 128393, 128395, 128398, 175400, 175404, 175412, 175413, 68047, 68057, 68058, 68062, 68063, 68064, 68065, 68067, 68069, 68071, 68072, 68074, 68075, 68076, 68077, 68078, 68079, 68080, 68081, 68082, 68083, 68084, 68085, 68086, 68087, 68088, 68089, 68090, 128040, 128044, 128046, 128049, 128050, 128055, 128059, 128061, 128062, 128063, 128068, 128071, 128072, 128073, 128083, 128885, 128945, 128946, 128948, 128950, 128953, 128958, 128962, 128963, 128964, 128966, 128971, 128973, 128975, 128981, 128984, 128991, 128992, 128994, 128995, 175421, 128330, 128333, 128334, 128336, 128339, 128341, 128343, 128350, 128351, 128352, 128355, 128356, 128358, 128359, 175441, 175442, 175472, 175474, 129014, 129015, 128186, 128190, 128191, 128193, 128194, 128198, 128200, 128201, 128202, 128204, 128211, 128214, 128215, 128217, 128219, 128220, 128221, 128223, 128229, 128231, 127333, 127334, 127335, 127336, 127337, 127339, 127344, 127345, 127350, 127352, 127357, 127358, 127360, 127361, 127366, 127367, 127371, 127372, 127374, 127375, 58343, 124028, 124029, 124031, 124038, 124049, 124053, 124054, 124060, 124077, 57807, 127272, 127291, 127299, 127301, 127311, 127313, 127315, 126734, 126736, 127128, 133197, 133198, 133199, 133200, 133201, 128598, 128599, 128600, 128601, 128602, 128603, 128607, 128609, 128612, 128613, 128614, 128615, 128624, 128625, 126940, 126942, 126943, 126944, 126945, 126946, 126947, 126949, 126950, 126954, 126955, 126956, 126974, 126975, 126976, 126977, 126978, 126979, 126990, 126994, 126073, 126077, 125840, 125695, 129215, 129991, 130691, 131762, 135660, 135661, 135662, 127980, 136519, 136521, 136523, 136540, 136541, 136542, 136545, 146753, 146762, 146765, 146771, 149995, 149997, 149998, 150004, 150005, 150012, 150015, 150021, 150027, 150030, 150031, 149686, 149688, 149692, 149694, 149695, 149696, 149697, 149702, 149725, 149726, 149727, 149732, 149733, 149734, 149737, 149738, 149740, 149741, 150234, 153050, 152530, 152531, 152532, 155348, 155352, 155354, 155359, 155362, 155364, 155369, 155371, 155373, 155374, 155375, 155377, 155378, 155382, 155383, 155385, 155386, 155387, 155389, 155390, 155391, 155392, 155396, 155397, 155400, 155403, 155404, 155405, 155406, 153557, 154289, 154293, 154554, 170483, 157100, 157103, 157104, 157105, 157107, 157108, 157109, 157110, 157112, 157114, 157116, 157118, 157119, 157121, 157122, 157123, 157124, 157126, 157127, 157131, 157132, 157134, 157136, 157137, 157138, 157139, 157143, 157144, 157147, 157149, 157150, 157151, 157152, 157153, 157154, 157156, 157157, 157159, 157220, 157222, 157223, 157224, 157227, 157228, 157229, 157236, 157241, 157242, 157247, 157248, 157249, 157250, 157251, 157252, 157253, 157256, 157260, 157262, 157264, 157265, 157266, 157267, 157272, 157273, 157275, 158556, 158954, 160397, 162850, 165476, 156285, 156291, 156292, 156293, 156294, 156298, 156299, 156301, 156302, 156307, 156309, 156311, 156323, 177906, 182450, 182451, 182452, 182453, 182454, 182455, 182456, 182457, 182458, 182459, 182463, 182465, 182466, 182467, 182468, 182665, 182666, 182667, 182668, 182669, 182670, 182671, 182672, 182673, 182677, 182678, 182679, 182680, 182681, 182682, 182683, 182684, 182685, 182686, 182687, 182688, 182689, 182690, 182691, 182692, 182693, 182694, 182695, 182696, 182697, 182698, 182715, 187757, 176403, 40089, 40136, 40141, 40142, 40343, 40348, 40379, 40451, 40447, 40593, 40781, 41243, 41798, 41794, 41797, 41973, 41975, 41977, 41984, 42009, 42010, 42011, 42012, 42013, 42014, 42015, 42017, 42018, 42026, 42027, 42032, 42108, 42179, 42180, 42182, 42187, 42189, 42340, 42479, 42480, 42481, 42482, 42483, 42484, 42485, 42486, 42487, 42488, 42491, 42755, 42766, 42768, 42769, 42770, 42771, 42772, 43385, 43621, 43785, 43811, 43845, 43846, 43847, 43850, 43879, 43906, 43970, 43971, 43974, 44052, 44053, 44418, 44422, 44425, 44428, 44431, 44483, 44560, 44561, 44565, 45118, 45182, 45429, 45500, 45981, 45986, 46016, 46017, 46033, 46034, 46035, 46043, 46059, 46303, 46306, 46307, 46308, 46309, 63311, 128841, 128846, 128847, 128848, 128849, 128850, 128853, 127320, 126951, 126952, 126953, 126957, 126958, 126959, 126960, 126961, 126962, 126968, 126980, 126981, 131768, 131769, 131776, 131777, 131778, 131779, 131788, 131800, 131803, 131804, 131805, 131806, 131807, 131809, 131608, 131609, 131610, 131611, 131612, 43932 };
            int res = ids.CloseWir(list, DateTime.Now, "Запись закрыта принудительно (очистка согласно положению парка)", @"EUROPE\ealevchenko");
        }

        #endregion

        #region IDS_SAP
        // чтение и обновление сап
        public void IDS_SAP_GetCurrentIncomingSupplyOfWebSAP()
        {

            IDS_SAP ids = new IDS_SAP(service.Test);

            EFSAPIncomingSupply ef_sap = new EFSAPIncomingSupply(new EFDbContext());
            SAPIncomingSupply sap = new SAPIncomingSupply()
            {
                id = 0,
                id_arrival_car = 0,
                num = 54905161,
                num_doc_uz = "29426762",
                create = DateTime.Now,
                create_user = "test_sap"
            };
            //SAPIncomingSupply sap = ef_sap.Context.Where(s => s.id == 8091).FirstOrDefault();
            //sap.num = 54905161;
            //sap.num_doc_uz = "29426762";
            SAPIncomingSupply res = ids.GetCurrentIncomingSupplyOfWebSAP(sap);
        }

        public void IDS_SAP_UpdateIncomingSupply()
        {

            EFDbContext context = new EFDbContext();

            IDS_SAP ids = new IDS_SAP(service.Test);
            int result = ids.UpdateListIncomingSupply(new List<int>() { 1, 3, 20, 37, 38, 40 }, @"EUROPE\ealevchenko");

        }

        #endregion

        #region IDSDirectory

        public void IDSDirectory_GetID_Directory_StationOfCodeCS()
        {

            IDSDirectory ids = new IDSDirectory(service.Test);
            int res = ids.GetID_Directory_StationOfCodeCS(873009, true);

        }
        // Тест получение текущего вагона
        public void IDSDirectory_GetCurrentDirectory_CarsOfNum()
        {

            IDSDirectory ids = new IDSDirectory(service.Test);
            //Directory_Wagons res = ids.GetDirectory_WagonsOfNum(50030584, 22,60, 4, "", true, @"EUROPE\ealevchenko", false);

        }

        public void IDSDirectory_IsCorrectNumCar()
        {

            IDSDirectory ids = new IDSDirectory(service.Test);
            bool res = ids.IsCorrectNumCar(12345678);

        }

        #endregion

        #region IDSMORS
        // Тест Вернуть последнюю обработаную запись ID nолученую их таблицы WT
        public void IDSMORS_GetLastIDWTWagonsMotionSignals()
        {

            IDSMORS ids = new IDSMORS(service.Test);
            long? res = ids.GetLastIDWTWagonsMotionSignals(63664585);

        }
        #endregion

        #region IDS_WIR
        /// <summary>
        /// Перенкмерация с указаной позиции
        /// </summary>
        public void IDS_WIR_RenumberingWagons()
        {

            IDS_WIR ids = new IDS_WIR(service.Test);

            EFDbContext context = new EFDbContext();

            int res = ids.RenumberingWagons(ref context, 111, 1);
            int res_save = context.SaveChanges();

        }
        /// <summary>
        /// операция дислокация
        /// </summary>
        public void IDS_WIR_DislocationWagons()
        {

            IDS_WIR ids = new IDS_WIR(service.Test);

            EFDbContext context = new EFDbContext();

            List<WagonInternalRoutes> wagons = new List<WagonInternalRoutes>();
            List<WagonInternalMovement> list_wim = context.WagonInternalMovement.Where(m => m.id_way == 111 && m.way_end == null).OrderBy(m => m.position).ToList();

            foreach (WagonInternalMovement wim in list_wim)
            {
                if (wim.WagonInternalRoutes.num == 58481748 || wim.WagonInternalRoutes.num == 60381712)

                    wagons.Add(wim.WagonInternalRoutes);

            }

            ResultTransfer res = new ResultTransfer(0);

            res = ids.DislocationWagons(ref context, 111, false, 115, false, DateTime.Now, wagons, "TЭM18-183", "TЭM18-184", "TEST");
            //int res_save = context.SaveChanges();

        }
        // Тест операции дислокации
        public void IDS_WIR_DislocationWagonsOfStation()
        {

            IDS_WIR ids = new IDS_WIR(service.Test);

            EFDbContext context = new EFDbContext();

            List<long> wagons = new List<long>();
            List<WagonInternalMovement> list_wim = context.WagonInternalMovement.Where(m => m.id_way == 111 && m.way_end == null).OrderBy(m => m.position).ToList();

            foreach (WagonInternalMovement wim in list_wim)
            {
                if (wim.WagonInternalRoutes.num == 58484320 || wim.WagonInternalRoutes.num == 53779476)

                    wagons.Add(wim.WagonInternalRoutes.id);

            }


            //int res = ids.DislocationWagonsOfStation(wagons, 111, false, 115, false, DateTime.Now, "TЭM18-183", "TЭM18-184", "TEST");
            //int res_save = context.SaveChanges();

        }
        // Тест операции роспуск
        public void IDS_WIR_DissolutionWagonsOfStation()
        {

            IDS_WIR ids = new IDS_WIR(service.Test);

            EFDbContext context = new EFDbContext();

            List<DissolutionWagon> list_dissolution = new List<DissolutionWagon>();
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41794, position = 2, id_way_dissolution = 214 });
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41795, position = 3, id_way_dissolution = 214 });
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41796, position = 4, id_way_dissolution = 213 });
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41797, position = 5, id_way_dissolution = 214 });
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41798, position = 6, id_way_dissolution = 213 });
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41799, position = 7, id_way_dissolution = 214 });
            list_dissolution.Add(new DissolutionWagon() { wir_id = 41800, position = 8, id_way_dissolution = 213 });



            int res = ids.DissolutionWagonsOfStation(105, list_dissolution, DateTime.Now.AddMinutes(-30), DateTime.Now, "TEST");
            //int res_save = context.SaveChanges();

        }
        // Тест операции отправки
        public void IDS_WIR_SendingWagonsOfStation()
        {

            IDS_WIR ids = new IDS_WIR(service.Test);

            EFDbContext context = new EFDbContext();

            List<ListOperationWagon> list_sending = new List<ListOperationWagon>();
            list_sending.Add(new ListOperationWagon() { wir_id = 45153, position = 1 });
            list_sending.Add(new ListOperationWagon() { wir_id = 45157, position = 2 });
            list_sending.Add(new ListOperationWagon() { wir_id = 45162, position = 3 });
            list_sending.Add(new ListOperationWagon() { wir_id = 45165, position = 4 });

            int res = ids.SendingWagonsOfStation(105, list_sending, 12, 123, DateTime.Now, "TЭM18-183", "TЭM18-184", "TEST");
            //int res_save = context.SaveChanges();

        }
        // Тест операции отправки
        public void IDS_WIR_ArrivalWagonsOfStation()
        {

            IDS_WIR ids = new IDS_WIR(service.Test);

            EFDbContext context = new EFDbContext();

            List<ListOperationWagon> list_sending = new List<ListOperationWagon>();
            list_sending.Add(new ListOperationWagon() { wir_id = 45152, position = 1 });
            list_sending.Add(new ListOperationWagon() { wir_id = 45154, position = 2 });
            list_sending.Add(new ListOperationWagon() { wir_id = 45156, position = 3 });

            int res = ids.ArrivalWagonsOfStation(12, true, list_sending, 494, true, DateTime.Now, "TЭM18-183", "TЭM18-184", "TEST");
            //int res_save = context.SaveChanges();

        }


        #endregion

        #region IDSThread
        /// <summary>
        ///  Тест выполнения потока обновления информации по Вх. поставке
        /// </summary>
        public void IDSThread_Start_UpdateIncomingSupply()
        {
            IDSThread ids_th = new IDSThread(service.IDS);
            ids_th.Start_UpdateIncomingSupply();

        }

        #endregion


        public void GetActs()
        {

            UZ.UZ_Convert convert = new UZ.UZ_Convert();
            EFIDS.Concrete.EFUZ_DOC ef_uz_doc = new EFIDS.Concrete.EFUZ_DOC(new EFIDS.Concrete.EFDbContext());
            foreach (EFIDS.Entities.UZ_DOC doc in ef_uz_doc.Context.ToList())
            {
                string xml_final = convert.XMLToFinalXML(doc.xml_doc);
                UZ.OTPR otpr = convert.FinalXMLToOTPR(xml_final);
                if (otpr != null && otpr.acts != null && otpr.acts.Count() > 0)
                {
                    Console.WriteLine("num_doc = {0}", doc.num_doc);
                }
            }
        }

        public void GetDocs()
        {

            UZ.UZ_Convert convert = new UZ.UZ_Convert();
            EFIDS.Concrete.EFUZ_DOC ef_uz_doc = new EFIDS.Concrete.EFUZ_DOC(new EFIDS.Concrete.EFDbContext());
            foreach (EFIDS.Entities.UZ_DOC doc in ef_uz_doc.Context.ToList())
            {
                string xml_final = convert.XMLToFinalXML(doc.xml_doc);
                UZ.OTPR otpr = convert.FinalXMLToOTPR(xml_final);
                if (otpr != null && otpr.sender_doc != null && otpr.sender_doc.Count() > 0)
                {
                    foreach (UZ.SENDER_DOC sd in otpr.sender_doc.ToList())
                    {
                        Console.WriteLine("num_doc = {0}, сылка на документ : {1}", doc.num_doc, sd.id);
                    }
                }
            }
        }

        public void SetNum_UZ()
        {

            UZ.UZ_Convert convert = new UZ.UZ_Convert();
            EFIDS.Concrete.EFUZ_DOC ef_uz_doc = new EFIDS.Concrete.EFUZ_DOC(new EFIDS.Concrete.EFDbContext());
            List<EFIDS.Entities.UZ_DOC> list_docs = ef_uz_doc.Context.Where(d => d.num_uz == null).ToList();
            int count = list_docs.Count();
            foreach (EFIDS.Entities.UZ_DOC doc in list_docs)
            {
                count--;
                string xml_final = convert.XMLToFinalXML(doc.xml_doc);
                UZ.OTPR otpr = convert.FinalXMLToOTPR(xml_final);
                if (otpr != null && otpr.nom_doc != null)
                {
                    doc.num_uz = otpr.nom_doc;
                    int result = ef_uz_doc.Save();
                    //foreach (UZ.SENDER_DOC sd in otpr.sender_doc.ToList()) { 
                    Console.WriteLine("num_doc = {0}, результат сохранения : {1}, осталось {2}", doc.num_doc, result, count);
                    //}
                }
            }
        }

    }
}
